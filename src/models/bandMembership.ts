import {
  BandMembershipModel,
  BandMembershipDocument,
  getBandMembershipKeyFromBandId,
  getBandMembershipKeyFromUserId,
} from "../db";
import { fetchBandById, fetchBandsByIds } from "./band";
// import { BAND_KEY_PREFIX, USER_KEY_PREFIX } from "./constants";
import type {
  BandMemberRole,
  BandId,
  User,
  BandMembership,
  Email,
  Band,
} from "./types";
import { fetchUsersByEmails } from "./user";

// const getBandMembershipKeyFromBandId = (bandId: BandId): Object => ({
// pk: BAND_KEY_PREFIX + bandId,
// sk: { beginsWith: USER_KEY_PREFIX },
// });
//
// const getBandMembershipKeyFromUserId = (email: Email): Object => ({
// pk: { beginsWith: BAND_KEY_PREFIX },
// sk: USER_KEY_PREFIX + email,
// });

const getRecordFromBandMembership = (
  membership: BandMembership,
): BandMembershipDocument => new BandMembershipModel({
  pk: membership.id,
  sk: membership.email,
  role: membership.role,
});

export const addUserToBand = async (
  email: Email,
  bandId: BandId,
  role: BandMemberRole,
) => {
  try {
    const band = await fetchBandById(bandId);
    const bandMembershipRecord = getRecordFromBandMembership({
      id: band.id,
      name: band.name,
      location: band.location,
      email,
      role,
    });
    await bandMembershipRecord.save();
  } catch (e) {
    throw new Error(e.message);
  }
};

export const fetchUsersByBand = async (band: Band): Promise<User[]> => {
  try {
    const membershipRecords = await BandMembershipModel.query(
      getBandMembershipKeyFromBandId(band.id),
    ).exec();

    const userEmails = membershipRecords.map((record) => record.sk);
    return fetchUsersByEmails(userEmails);
  } catch (e) {
    throw new Error(e.message);
  }
};

export const fetchBandsByUser = async (user: User) => {
  try {
    const bandMembershipRecords = await BandMembershipModel.query(
      getBandMembershipKeyFromUserId(user.email),
    )
      // this is the secret sauce of single-table relationships
      // todo: rename this index to something not autogenerated
      .using("skGlobalIndex")
      .exec();

    const bandIds = bandMembershipRecords.map(
      (record: BandMembershipDocument) => record.pk,
    );

    return fetchBandsByIds(bandIds);
  } catch (e) {
    throw new Error(e.message);
  }
};
