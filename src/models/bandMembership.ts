import { BandModel } from "../db";
import { fetchBandById, fetchBandsByIds } from "./band";
import { BAND_KEY_PREFIX, USER_KEY_PREFIX } from "./constants";
import type {
  BandMemberRole,
  BandMembershipRecord,
  BandId,
  UserRecord,
  User,
  BandMembership,
  Email,
  Band,
} from "./types";
import { getUserFromRecord, isUserRecord } from "./user";

const isBandMembershipRecord = (
  document: unknown,
): document is BandMembershipRecord => {
  const record = document as BandMembershipRecord;
  return (
    record.pk.startsWith(BAND_KEY_PREFIX)
    && record.sk.startsWith(USER_KEY_PREFIX)
  );
};

const getRecordFromBandMembership = (
  membership: BandMembership,
): BandMembershipRecord => ({
  pk: BAND_KEY_PREFIX + membership.id,
  sk: USER_KEY_PREFIX + membership.email,
  role: membership.role,
  location: membership.location,
  name: membership.name,
});

export const addUserToBand = async (
  email: Email,
  bandId: BandId,
  role: BandMemberRole,
) => {
  try {
    const band = await fetchBandById(bandId);
    BandModel.create(
      getRecordFromBandMembership({
        name: band.name,
        location: band.location,
        id: band.id,
        role,
        email,
      }),
    );
  } catch (e) {
    throw new Error(e.message);
  }
};

const validateMembershipRecords = (records: any[]): BandMembershipRecord[] => {
  const validatedMembershipRecords = records.filter((record) => isBandMembershipRecord(record));
  return (validatedMembershipRecords as unknown) as BandMembershipRecord[];
};

export const fetchUsersByBand = async (band: Band): Promise<User[]> => {
  try {
    // i will have to circle back and improve this performance later
    const membershipRecords = await BandModel.query({
      pk: { eq: BAND_KEY_PREFIX + band.id },
      sk: { beginsWith: USER_KEY_PREFIX },
    }).exec();

    const validatedMembershipRecords = validateMembershipRecords(
      membershipRecords,
    );

    const keys = validatedMembershipRecords.map((record) => {
      const membershipRecord = (record as unknown) as BandMembershipRecord;
      return {
        pk: membershipRecord.sk,
        sk: membershipRecord.sk,
      };
    });

    const userRecords = await BandModel.batchGet(keys);
    return userRecords
      .filter((record) => isUserRecord(record))
      .map((record) => getUserFromRecord((record as unknown) as UserRecord));
  } catch (e) {
    throw new Error(e.message);
  }
};

export const fetchBandsByUser = async (user: User) => {
  try {
    const bandMembershipRecords = await BandModel.query({
      sk: { eq: USER_KEY_PREFIX + user.email },
      pk: { beginsWith: BAND_KEY_PREFIX },
    })
      // this is the secret sauce of single-table relationships
      // todo: rename this index to something not autogenerated
      .using("skGlobalIndex")
      .exec();
    const validatedMembershipRecords = validateMembershipRecords(
      bandMembershipRecords,
    );

    const bandIds = validatedMembershipRecords.map((record) => record.pk);

    return fetchBandsByIds(bandIds);
  } catch (e) {
    throw new Error(e.message);
  }
};
