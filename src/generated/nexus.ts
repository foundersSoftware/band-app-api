/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as ctx from "../context"
import * as models from "../models/types"





declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  BandAddMemberInput: { // input type
    bandId: string; // String!
    bandMemberRole: string; // String!
    userId: string; // String!
  }
  BandCreateInput: { // input type
    location: string; // String!
    name: string; // String!
  }
  UserCreateInput: { // input type
    email: string; // String!
    password: string; // String!
  }
  UserCredentialsType: { // input type
    email: string; // String!
    password: string; // String!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenRootTypes {
  Band: models.Band;
  BandDetails: models.BandDetails;
  Mutation: {};
  Query: {};
  User: models.User;
  UserToken: { // root type
    token: string; // String!
  }
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  BandAddMemberInput: NexusGenInputs['BandAddMemberInput'];
  BandCreateInput: NexusGenInputs['BandCreateInput'];
  UserCreateInput: NexusGenInputs['UserCreateInput'];
  UserCredentialsType: NexusGenInputs['UserCredentialsType'];
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
}

export interface NexusGenFieldTypes {
  Band: { // field return type
    details: NexusGenRootTypes['BandDetails']; // BandDetails!
    id: string; // String!
    members: NexusGenRootTypes['User'][]; // [User!]!
    name: string; // String!
  }
  BandDetails: { // field return type
    location: string; // String!
  }
  Mutation: { // field return type
    addOneUserToOneBand: string; // String!
    createOneBand: NexusGenRootTypes['Band']; // Band!
    createOneUser: NexusGenRootTypes['UserToken'] | null; // UserToken
    login: NexusGenRootTypes['UserToken'] | null; // UserToken
  }
  Query: { // field return type
    findOneUserByEmail: NexusGenRootTypes['User']; // User!
    getOneBandById: NexusGenRootTypes['Band']; // Band!
    me: NexusGenRootTypes['User']; // User!
  }
  User: { // field return type
    bands: NexusGenRootTypes['Band'][]; // [Band!]!
    email: string; // String!
  }
  UserToken: { // field return type
    token: string; // String!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addOneUserToOneBand: { // args
      membership: NexusGenInputs['BandAddMemberInput']; // BandAddMemberInput!
    }
    createOneBand: { // args
      band: NexusGenInputs['BandCreateInput']; // BandCreateInput!
    }
    createOneUser: { // args
      user: NexusGenInputs['UserCreateInput']; // UserCreateInput!
    }
    login: { // args
      credentials: NexusGenInputs['UserCredentialsType']; // UserCredentialsType!
    }
  }
  Query: {
    findOneUserByEmail: { // args
      email: string; // String!
    }
    getOneBandById: { // args
      bandId: string; // String!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Band" | "BandDetails" | "Mutation" | "Query" | "User" | "UserToken";

export type NexusGenInputNames = "BandAddMemberInput" | "BandCreateInput" | "UserCreateInput" | "UserCredentialsType";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: ctx.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}