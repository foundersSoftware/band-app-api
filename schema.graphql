### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Band {
  details: BandDetails!
  id: String!
  members: [User!]!
  name: String!
  setlists: [Setlist!]!
  songs: [Song!]!
}

input BandAddMemberInput {
  bandId: String!
  bandMemberRole: String!
  userId: String!
}

input BandCreateInput {
  location: String!
  name: String!
}

type BandDetails {
  location: String!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

type Event {
  bandId: String!
  calltime: Time!
  date: Date!
  id: String!
  name: String!
  paid: Boolean!
  type: EventType!
}

input EventCreateInput {
  bandId: String!
  calltime: Time!
  date: Date!
  name: String!
  paid: Boolean! = false
  type: EventType!
}

enum EventType {
  GIG
  PRACTICE
}

type Mutation {
  addOneSongToSetlist(membership: SetlistAddSongInput!): String!
  addOneUserToOneBand(membership: BandAddMemberInput!): String!
  createOneBand(band: BandCreateInput!): Band!
  createOneEvent(event: EventCreateInput!): Event!
  createOneSetlist(setlist: SetlistCreateInput!): Setlist!
  createOneSong(song: SongCreateInput!): Song!
  createOneUser(user: UserCreateInput!): UserToken
  login(credentials: UserCredentialsType!): UserToken
}

type Query {
  findEventsByBand(bandId: String!): [Event!]!
  findOneUserByEmail(email: String!): User!
  findSetlistsByBand(bandId: String!): [Setlist!]!
  findSongsByBand(bandId: String!): [Song!]!
  getOneBandById(bandId: String!): Band!
  me: User!
}

type Setlist {
  """Costs a Query, if you just need the band Id, use bandId instead!"""
  band: Band!
  bandId: String!
  id: String!
  songs: [Song!]!
  title: String!
}

input SetlistAddSongInput {
  bandId: String!
  setlistId: String!
  songId: String!
}

input SetlistCreateInput {
  bandId: String!
  title: String!
}

type Song {
  """Costs a Query, if you just need the band Id, use bandId instead!"""
  band: Band!
  bandId: String!
  id: String!
  setlists: [Setlist!]!
  title: String!
}

input SongCreateInput {
  bandId: String!
  title: String!
}

"""
A time string at UTC, such as 10:15:30Z, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Time

type User {
  bands: [Band!]!
  email: String!
}

input UserCreateInput {
  email: String!
  password: String!
}

input UserCredentialsType {
  email: String!
  password: String!
}

type UserToken {
  token: String!
}
